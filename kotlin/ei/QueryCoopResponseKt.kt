//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ei.proto

package ei;

@kotlin.jvm.JvmSynthetic
public inline fun queryCoopResponse(block: ei.QueryCoopResponseKt.Dsl.() -> kotlin.Unit): ei.Ei.QueryCoopResponse =
  ei.QueryCoopResponseKt.Dsl._create(ei.Ei.QueryCoopResponse.newBuilder()).apply { block() }._build()
public object QueryCoopResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ei.Ei.QueryCoopResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ei.Ei.QueryCoopResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ei.Ei.QueryCoopResponse = _builder.build()

    /**
     * <code>optional bool exists = 1;</code>
     */
    public var exists: kotlin.Boolean
      @JvmName("getExists")
      get() = _builder.getExists()
      @JvmName("setExists")
      set(value) {
        _builder.setExists(value)
      }
    /**
     * <code>optional bool exists = 1;</code>
     */
    public fun clearExists() {
      _builder.clearExists()
    }
    /**
     * <code>optional bool exists = 1;</code>
     * @return Whether the exists field is set.
     */
    public fun hasExists(): kotlin.Boolean {
      return _builder.hasExists()
    }

    /**
     * <code>optional bool full = 2;</code>
     */
    public var full: kotlin.Boolean
      @JvmName("getFull")
      get() = _builder.getFull()
      @JvmName("setFull")
      set(value) {
        _builder.setFull(value)
      }
    /**
     * <code>optional bool full = 2;</code>
     */
    public fun clearFull() {
      _builder.clearFull()
    }
    /**
     * <code>optional bool full = 2;</code>
     * @return Whether the full field is set.
     */
    public fun hasFull(): kotlin.Boolean {
      return _builder.hasFull()
    }

    /**
     * <code>optional bool expired = 5;</code>
     */
    public var expired: kotlin.Boolean
      @JvmName("getExpired")
      get() = _builder.getExpired()
      @JvmName("setExpired")
      set(value) {
        _builder.setExpired(value)
      }
    /**
     * <code>optional bool expired = 5;</code>
     */
    public fun clearExpired() {
      _builder.clearExpired()
    }
    /**
     * <code>optional bool expired = 5;</code>
     * @return Whether the expired field is set.
     */
    public fun hasExpired(): kotlin.Boolean {
      return _builder.hasExpired()
    }

    /**
     * <code>optional bool different_league = 4;</code>
     */
    public var differentLeague: kotlin.Boolean
      @JvmName("getDifferentLeague")
      get() = _builder.getDifferentLeague()
      @JvmName("setDifferentLeague")
      set(value) {
        _builder.setDifferentLeague(value)
      }
    /**
     * <code>optional bool different_league = 4;</code>
     */
    public fun clearDifferentLeague() {
      _builder.clearDifferentLeague()
    }
    /**
     * <code>optional bool different_league = 4;</code>
     * @return Whether the differentLeague field is set.
     */
    public fun hasDifferentLeague(): kotlin.Boolean {
      return _builder.hasDifferentLeague()
    }

    /**
     * <code>optional bool banned = 3;</code>
     */
    public var banned: kotlin.Boolean
      @JvmName("getBanned")
      get() = _builder.getBanned()
      @JvmName("setBanned")
      set(value) {
        _builder.setBanned(value)
      }
    /**
     * <code>optional bool banned = 3;</code>
     */
    public fun clearBanned() {
      _builder.clearBanned()
    }
    /**
     * <code>optional bool banned = 3;</code>
     * @return Whether the banned field is set.
     */
    public fun hasBanned(): kotlin.Boolean {
      return _builder.hasBanned()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.QueryCoopResponse.copy(block: ei.QueryCoopResponseKt.Dsl.() -> kotlin.Unit): ei.Ei.QueryCoopResponse =
  ei.QueryCoopResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

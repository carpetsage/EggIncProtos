//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ei.proto

package ei;

@kotlin.jvm.JvmName("-initializelogConsumeArtifactPayload")
public inline fun logConsumeArtifactPayload(block: ei.LogConsumeArtifactPayloadKt.Dsl.() -> kotlin.Unit): ei.Ei.LogConsumeArtifactPayload =
  ei.LogConsumeArtifactPayloadKt.Dsl._create(ei.Ei.LogConsumeArtifactPayload.newBuilder()).apply { block() }._build()
public object LogConsumeArtifactPayloadKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ei.Ei.LogConsumeArtifactPayload.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ei.Ei.LogConsumeArtifactPayload.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ei.Ei.LogConsumeArtifactPayload = _builder.build()

    /**
     * <code>optional .ei.ConsumeArtifactRequest req = 1;</code>
     */
    public var req: ei.Ei.ConsumeArtifactRequest
      @JvmName("getReq")
      get() = _builder.getReq()
      @JvmName("setReq")
      set(value) {
        _builder.setReq(value)
      }
    /**
     * <code>optional .ei.ConsumeArtifactRequest req = 1;</code>
     */
    public fun clearReq() {
      _builder.clearReq()
    }
    /**
     * <code>optional .ei.ConsumeArtifactRequest req = 1;</code>
     * @return Whether the req field is set.
     */
    public fun hasReq(): kotlin.Boolean {
      return _builder.hasReq()
    }
    public val LogConsumeArtifactPayloadKt.Dsl.reqOrNull: ei.Ei.ConsumeArtifactRequest?
      get() = _builder.reqOrNull

    /**
     * <code>optional .ei.ConsumeArtifactResponse res = 2;</code>
     */
    public var res: ei.Ei.ConsumeArtifactResponse
      @JvmName("getRes")
      get() = _builder.getRes()
      @JvmName("setRes")
      set(value) {
        _builder.setRes(value)
      }
    /**
     * <code>optional .ei.ConsumeArtifactResponse res = 2;</code>
     */
    public fun clearRes() {
      _builder.clearRes()
    }
    /**
     * <code>optional .ei.ConsumeArtifactResponse res = 2;</code>
     * @return Whether the res field is set.
     */
    public fun hasRes(): kotlin.Boolean {
      return _builder.hasRes()
    }
    public val LogConsumeArtifactPayloadKt.Dsl.resOrNull: ei.Ei.ConsumeArtifactResponse?
      get() = _builder.resOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.LogConsumeArtifactPayload.copy(block: ei.LogConsumeArtifactPayloadKt.Dsl.() -> kotlin.Unit): ei.Ei.LogConsumeArtifactPayload =
  ei.LogConsumeArtifactPayloadKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val ei.Ei.LogConsumeArtifactPayloadOrBuilder.reqOrNull: ei.Ei.ConsumeArtifactRequest?
  get() = if (hasReq()) getReq() else null

val ei.Ei.LogConsumeArtifactPayloadOrBuilder.resOrNull: ei.Ei.ConsumeArtifactResponse?
  get() = if (hasRes()) getRes() else null


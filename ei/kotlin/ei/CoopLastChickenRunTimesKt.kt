//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ei.proto

package ei;

@kotlin.jvm.JvmSynthetic
public inline fun coopLastChickenRunTimes(block: ei.CoopLastChickenRunTimesKt.Dsl.() -> kotlin.Unit): ei.Ei.CoopLastChickenRunTimes =
  ei.CoopLastChickenRunTimesKt.Dsl._create(ei.Ei.CoopLastChickenRunTimes.newBuilder()).apply { block() }._build()
public object CoopLastChickenRunTimesKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ei.Ei.CoopLastChickenRunTimes.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ei.Ei.CoopLastChickenRunTimes.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ei.Ei.CoopLastChickenRunTimes = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class EntriesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .ei.CoopChickenRunEntry entries = 3;</code>
     */
     public val entries: com.google.protobuf.kotlin.DslList<ei.Ei.CoopChickenRunEntry, EntriesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getEntriesList()
      )
    /**
     * <code>repeated .ei.CoopChickenRunEntry entries = 3;</code>
     * @param value The entries to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addEntries")
    public fun com.google.protobuf.kotlin.DslList<ei.Ei.CoopChickenRunEntry, EntriesProxy>.add(value: ei.Ei.CoopChickenRunEntry) {
      _builder.addEntries(value)
    }/**
     * <code>repeated .ei.CoopChickenRunEntry entries = 3;</code>
     * @param value The entries to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignEntries")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<ei.Ei.CoopChickenRunEntry, EntriesProxy>.plusAssign(value: ei.Ei.CoopChickenRunEntry) {
      add(value)
    }/**
     * <code>repeated .ei.CoopChickenRunEntry entries = 3;</code>
     * @param values The entries to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllEntries")
    public fun com.google.protobuf.kotlin.DslList<ei.Ei.CoopChickenRunEntry, EntriesProxy>.addAll(values: kotlin.collections.Iterable<ei.Ei.CoopChickenRunEntry>) {
      _builder.addAllEntries(values)
    }/**
     * <code>repeated .ei.CoopChickenRunEntry entries = 3;</code>
     * @param values The entries to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllEntries")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<ei.Ei.CoopChickenRunEntry, EntriesProxy>.plusAssign(values: kotlin.collections.Iterable<ei.Ei.CoopChickenRunEntry>) {
      addAll(values)
    }/**
     * <code>repeated .ei.CoopChickenRunEntry entries = 3;</code>
     * @param index The index to set the value at.
     * @param value The entries to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setEntries")
    public operator fun com.google.protobuf.kotlin.DslList<ei.Ei.CoopChickenRunEntry, EntriesProxy>.set(index: kotlin.Int, value: ei.Ei.CoopChickenRunEntry) {
      _builder.setEntries(index, value)
    }/**
     * <code>repeated .ei.CoopChickenRunEntry entries = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearEntries")
    public fun com.google.protobuf.kotlin.DslList<ei.Ei.CoopChickenRunEntry, EntriesProxy>.clear() {
      _builder.clearEntries()
    }}
}
@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.CoopLastChickenRunTimes.copy(block: ei.CoopLastChickenRunTimesKt.Dsl.() -> kotlin.Unit): ei.Ei.CoopLastChickenRunTimes =
  ei.CoopLastChickenRunTimesKt.Dsl._create(this.toBuilder()).apply { block() }._build()

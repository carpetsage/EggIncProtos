//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ei.proto

package ei;

@kotlin.jvm.JvmSynthetic
public inline fun shellsActionLog(block: ei.ShellsActionLogKt.Dsl.() -> kotlin.Unit): ei.Ei.ShellsActionLog =
  ei.ShellsActionLogKt.Dsl._create(ei.Ei.ShellsActionLog.newBuilder()).apply { block() }._build()
public object ShellsActionLogKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ei.Ei.ShellsActionLog.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ei.Ei.ShellsActionLog.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ei.Ei.ShellsActionLog = _builder.build()

    /**
     * <code>optional .ei.BasicRequestInfo rinfo = 8;</code>
     */
    public var rinfo: ei.Ei.BasicRequestInfo
      @JvmName("getRinfo")
      get() = _builder.getRinfo()
      @JvmName("setRinfo")
      set(value) {
        _builder.setRinfo(value)
      }
    /**
     * <code>optional .ei.BasicRequestInfo rinfo = 8;</code>
     */
    public fun clearRinfo() {
      _builder.clearRinfo()
    }
    /**
     * <code>optional .ei.BasicRequestInfo rinfo = 8;</code>
     * @return Whether the rinfo field is set.
     */
    public fun hasRinfo(): kotlin.Boolean {
      return _builder.hasRinfo()
    }

    /**
     * <code>optional string user_id = 1;</code>
     */
    public var userId: kotlin.String
      @JvmName("getUserId")
      get() = _builder.getUserId()
      @JvmName("setUserId")
      set(value) {
        _builder.setUserId(value)
      }
    /**
     * <code>optional string user_id = 1;</code>
     */
    public fun clearUserId() {
      _builder.clearUserId()
    }
    /**
     * <code>optional string user_id = 1;</code>
     * @return Whether the userId field is set.
     */
    public fun hasUserId(): kotlin.Boolean {
      return _builder.hasUserId()
    }

    /**
     * <code>optional string action = 2;</code>
     */
    public var action: kotlin.String
      @JvmName("getAction")
      get() = _builder.getAction()
      @JvmName("setAction")
      set(value) {
        _builder.setAction(value)
      }
    /**
     * <code>optional string action = 2;</code>
     */
    public fun clearAction() {
      _builder.clearAction()
    }
    /**
     * <code>optional string action = 2;</code>
     * @return Whether the action field is set.
     */
    public fun hasAction(): kotlin.Boolean {
      return _builder.hasAction()
    }

    /**
     * <code>optional string sub_id = 3;</code>
     */
    public var subId: kotlin.String
      @JvmName("getSubId")
      get() = _builder.getSubId()
      @JvmName("setSubId")
      set(value) {
        _builder.setSubId(value)
      }
    /**
     * <code>optional string sub_id = 3;</code>
     */
    public fun clearSubId() {
      _builder.clearSubId()
    }
    /**
     * <code>optional string sub_id = 3;</code>
     * @return Whether the subId field is set.
     */
    public fun hasSubId(): kotlin.Boolean {
      return _builder.hasSubId()
    }

    /**
     * <code>optional .ei.ShellDB.FarmElement farm_element = 9;</code>
     */
    public var farmElement: ei.Ei.ShellDB.FarmElement
      @JvmName("getFarmElement")
      get() = _builder.getFarmElement()
      @JvmName("setFarmElement")
      set(value) {
        _builder.setFarmElement(value)
      }
    /**
     * <code>optional .ei.ShellDB.FarmElement farm_element = 9;</code>
     */
    public fun clearFarmElement() {
      _builder.clearFarmElement()
    }
    /**
     * <code>optional .ei.ShellDB.FarmElement farm_element = 9;</code>
     * @return Whether the farmElement field is set.
     */
    public fun hasFarmElement(): kotlin.Boolean {
      return _builder.hasFarmElement()
    }

    /**
     * <code>optional uint32 cost = 4;</code>
     */
    public var cost: kotlin.Int
      @JvmName("getCost")
      get() = _builder.getCost()
      @JvmName("setCost")
      set(value) {
        _builder.setCost(value)
      }
    /**
     * <code>optional uint32 cost = 4;</code>
     */
    public fun clearCost() {
      _builder.clearCost()
    }
    /**
     * <code>optional uint32 cost = 4;</code>
     * @return Whether the cost field is set.
     */
    public fun hasCost(): kotlin.Boolean {
      return _builder.hasCost()
    }

    /**
     * <code>optional double approx_time = 5;</code>
     */
    public var approxTime: kotlin.Double
      @JvmName("getApproxTime")
      get() = _builder.getApproxTime()
      @JvmName("setApproxTime")
      set(value) {
        _builder.setApproxTime(value)
      }
    /**
     * <code>optional double approx_time = 5;</code>
     */
    public fun clearApproxTime() {
      _builder.clearApproxTime()
    }
    /**
     * <code>optional double approx_time = 5;</code>
     * @return Whether the approxTime field is set.
     */
    public fun hasApproxTime(): kotlin.Boolean {
      return _builder.hasApproxTime()
    }

    /**
     * <code>optional string version = 6;</code>
     */
    public var version: kotlin.String
      @JvmName("getVersion")
      get() = _builder.getVersion()
      @JvmName("setVersion")
      set(value) {
        _builder.setVersion(value)
      }
    /**
     * <code>optional string version = 6;</code>
     */
    public fun clearVersion() {
      _builder.clearVersion()
    }
    /**
     * <code>optional string version = 6;</code>
     * @return Whether the version field is set.
     */
    public fun hasVersion(): kotlin.Boolean {
      return _builder.hasVersion()
    }

    /**
     * <code>optional int32 farm_index = 7;</code>
     */
    public var farmIndex: kotlin.Int
      @JvmName("getFarmIndex")
      get() = _builder.getFarmIndex()
      @JvmName("setFarmIndex")
      set(value) {
        _builder.setFarmIndex(value)
      }
    /**
     * <code>optional int32 farm_index = 7;</code>
     */
    public fun clearFarmIndex() {
      _builder.clearFarmIndex()
    }
    /**
     * <code>optional int32 farm_index = 7;</code>
     * @return Whether the farmIndex field is set.
     */
    public fun hasFarmIndex(): kotlin.Boolean {
      return _builder.hasFarmIndex()
    }

    /**
     * <code>optional double soul_eggs = 10;</code>
     */
    public var soulEggs: kotlin.Double
      @JvmName("getSoulEggs")
      get() = _builder.getSoulEggs()
      @JvmName("setSoulEggs")
      set(value) {
        _builder.setSoulEggs(value)
      }
    /**
     * <code>optional double soul_eggs = 10;</code>
     */
    public fun clearSoulEggs() {
      _builder.clearSoulEggs()
    }
    /**
     * <code>optional double soul_eggs = 10;</code>
     * @return Whether the soulEggs field is set.
     */
    public fun hasSoulEggs(): kotlin.Boolean {
      return _builder.hasSoulEggs()
    }

    /**
     * <code>optional uint64 tickets_spent = 11;</code>
     */
    public var ticketsSpent: kotlin.Long
      @JvmName("getTicketsSpent")
      get() = _builder.getTicketsSpent()
      @JvmName("setTicketsSpent")
      set(value) {
        _builder.setTicketsSpent(value)
      }
    /**
     * <code>optional uint64 tickets_spent = 11;</code>
     */
    public fun clearTicketsSpent() {
      _builder.clearTicketsSpent()
    }
    /**
     * <code>optional uint64 tickets_spent = 11;</code>
     * @return Whether the ticketsSpent field is set.
     */
    public fun hasTicketsSpent(): kotlin.Boolean {
      return _builder.hasTicketsSpent()
    }

    /**
     * <code>optional uint64 gold_spent = 12;</code>
     */
    public var goldSpent: kotlin.Long
      @JvmName("getGoldSpent")
      get() = _builder.getGoldSpent()
      @JvmName("setGoldSpent")
      set(value) {
        _builder.setGoldSpent(value)
      }
    /**
     * <code>optional uint64 gold_spent = 12;</code>
     */
    public fun clearGoldSpent() {
      _builder.clearGoldSpent()
    }
    /**
     * <code>optional uint64 gold_spent = 12;</code>
     * @return Whether the goldSpent field is set.
     */
    public fun hasGoldSpent(): kotlin.Boolean {
      return _builder.hasGoldSpent()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.ShellsActionLog.copy(block: ei.ShellsActionLogKt.Dsl.() -> kotlin.Unit): ei.Ei.ShellsActionLog =
  ei.ShellsActionLogKt.Dsl._create(this.toBuilder()).apply { block() }._build()

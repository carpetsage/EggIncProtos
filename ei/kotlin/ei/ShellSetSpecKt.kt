//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ei.proto

package ei;

@kotlin.jvm.JvmSynthetic
public inline fun shellSetSpec(block: ei.ShellSetSpecKt.Dsl.() -> kotlin.Unit): ei.Ei.ShellSetSpec =
  ei.ShellSetSpecKt.Dsl._create(ei.Ei.ShellSetSpec.newBuilder()).apply { block() }._build()
public object ShellSetSpecKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ei.Ei.ShellSetSpec.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ei.Ei.ShellSetSpec.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ei.Ei.ShellSetSpec = _builder.build()

    /**
     * <code>optional string identifier = 1;</code>
     */
    public var identifier: kotlin.String
      @JvmName("getIdentifier")
      get() = _builder.getIdentifier()
      @JvmName("setIdentifier")
      set(value) {
        _builder.setIdentifier(value)
      }
    /**
     * <code>optional string identifier = 1;</code>
     */
    public fun clearIdentifier() {
      _builder.clearIdentifier()
    }
    /**
     * <code>optional string identifier = 1;</code>
     * @return Whether the identifier field is set.
     */
    public fun hasIdentifier(): kotlin.Boolean {
      return _builder.hasIdentifier()
    }

    /**
     * <code>optional string name = 2;</code>
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <code>optional string name = 2;</code>
     */
    public fun clearName() {
      _builder.clearName()
    }
    /**
     * <code>optional string name = 2;</code>
     * @return Whether the name field is set.
     */
    public fun hasName(): kotlin.Boolean {
      return _builder.hasName()
    }

    /**
     * <code>optional uint32 price = 3;</code>
     */
    public var price: kotlin.Int
      @JvmName("getPrice")
      get() = _builder.getPrice()
      @JvmName("setPrice")
      set(value) {
        _builder.setPrice(value)
      }
    /**
     * <code>optional uint32 price = 3;</code>
     */
    public fun clearPrice() {
      _builder.clearPrice()
    }
    /**
     * <code>optional uint32 price = 3;</code>
     * @return Whether the price field is set.
     */
    public fun hasPrice(): kotlin.Boolean {
      return _builder.hasPrice()
    }

    /**
     * <code>optional uint32 required_eop = 4;</code>
     */
    public var requiredEop: kotlin.Int
      @JvmName("getRequiredEop")
      get() = _builder.getRequiredEop()
      @JvmName("setRequiredEop")
      set(value) {
        _builder.setRequiredEop(value)
      }
    /**
     * <code>optional uint32 required_eop = 4;</code>
     */
    public fun clearRequiredEop() {
      _builder.clearRequiredEop()
    }
    /**
     * <code>optional uint32 required_eop = 4;</code>
     * @return Whether the requiredEop field is set.
     */
    public fun hasRequiredEop(): kotlin.Boolean {
      return _builder.hasRequiredEop()
    }

    /**
     * <code>optional double required_soul_eggs = 5;</code>
     */
    public var requiredSoulEggs: kotlin.Double
      @JvmName("getRequiredSoulEggs")
      get() = _builder.getRequiredSoulEggs()
      @JvmName("setRequiredSoulEggs")
      set(value) {
        _builder.setRequiredSoulEggs(value)
      }
    /**
     * <code>optional double required_soul_eggs = 5;</code>
     */
    public fun clearRequiredSoulEggs() {
      _builder.clearRequiredSoulEggs()
    }
    /**
     * <code>optional double required_soul_eggs = 5;</code>
     * @return Whether the requiredSoulEggs field is set.
     */
    public fun hasRequiredSoulEggs(): kotlin.Boolean {
      return _builder.hasRequiredSoulEggs()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.ShellSetSpec.copy(block: ei.ShellSetSpecKt.Dsl.() -> kotlin.Unit): ei.Ei.ShellSetSpec =
  ei.ShellSetSpecKt.Dsl._create(this.toBuilder()).apply { block() }._build()
